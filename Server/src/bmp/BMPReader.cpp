/*
 * Copyright (c) 2013-2015 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <cstdio>
#include <unistd.h>

#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <cerrno>

#include "BMPListener.h"
#include "template_cfg.h"
#include "MsgBusInterface.hpp"
#include "BMPReader.h"
#include "parseBMP.h"
#include "parseBGP.h"
#include "template_cfg.h"
#include "Logger.h"
#include "md5.h"

void hashRouter(BMPListener::ClientInfo *client, MsgBusInterface::obj_router &r_entry,
                Config *cfg, u_char *router_hash_id, Logger *logger);

using namespace std;

/**
 * Class constructor
 *
 *  \param [in] logPtr  Pointer to existing Logger for app logging
 *  \param [in] config  Pointer to the loaded configuration
 *
 */
BMPReader::BMPReader(Logger *logPtr, Config *config) {
    debug = false;

    cfg = config;

    logger = logPtr;

    if (cfg->debug_bmp)
        enableDebug();
    
    hasPrevRIBdumpTime = false;
    maxRIBdumpRate = 0;
}

/**
 * Destructor
 */
BMPReader::~BMPReader() {

}

/**
 * Read messages from BMP stream in a loop
 *
 * \param [in]  run         Reference to bool to indicate if loop should continue or not
 * \param [in]  client      Client information pointer
 * \param [in]  mbus_ptr     The database pointer referencer - DB should be already initialized
 *
 * \return true if more to read, false if the connection is done/closed
 *
 * \throw (char const *str) message indicate error
 */
void BMPReader::readerThreadLoop(bool &run, BMPListener::ClientInfo *client, MsgBusInterface *mbus_ptr, std::string &template_filename) {

    Template_map template_map(logger, debug);
    /*
     * Construct the template
     */
    if (!template_filename.empty()) {
        LOG_INFO("BMP reader: template_filename is %s", template_filename.c_str());
        try {
            if (!template_map.load(template_filename.c_str())) {
                cout << "Error loading template" << endl;
                template_map.template_map.clear();
            }
        } catch (char const *str) {
            LOG_ERR("ERROR: BMP reader: Failed to load the template file: %s", str);
        }
    }

    while (run) {

        try {
            /*
             * Set the template for the msgbus
             */
            mbus_ptr->template_map = &template_map;
            if (not ReadIncomingMsg(client, mbus_ptr, &template_map))
                break;

        } catch (char const *str) {
            run = false;
            break;
        }
    }
}

/**
 * Read messages from BMP stream
 *
 * BMP routers send BMP/BGP messages, this method reads and parses those.
 *
 * \param [in]  client      Client information pointer
 * \param [in]  mbus_ptr     The database pointer referencer - DB should be already initialized
 *
 * \return true if more to read, false if the connection is done/closed
 *
 * \throw (char const *str) message indicate error
 */
bool BMPReader::ReadIncomingMsg(BMPListener::ClientInfo *client, MsgBusInterface *mbus_ptr, Template_map *template_map) {
    bool rval = true;
    string peer_info_key;

    parseBGP *pBGP;                                 // Pointer to BGP parser

    int read_fd = client->pipe_sock > 0 ? client->pipe_sock : client->c_sock;

    // Data storage structures
    MsgBusInterface::obj_bgp_peer p_entry;

    // Initialize the parser for BMP messages
    parseBMP *pBMP = new parseBMP(logger, &p_entry);    // handler for BMP messages

    if (cfg->debug_bmp) {
        enableDebug();
        pBMP->enableDebug();
    }

    char bmp_type = 0;

    parse_bgp_lib::parseBgpLib parser(logger, debug);
    parse_bgp_lib::parseBgpLib::parsed_update update;

    MsgBusInterface::obj_router r_object;
    memcpy(router_hash_id, client->hash_id, sizeof(router_hash_id));    // Cache the router hash ID (hash is generated by BMPListener)
    bzero(&r_object, sizeof(r_object));
    memcpy(r_object.hash_id, router_hash_id, sizeof(r_object.hash_id));

    update.router[parse_bgp_lib::LIB_ROUTER_HASH_ID].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_HASH_ID];
    update.router[parse_bgp_lib::LIB_ROUTER_HASH_ID].value.push_back(parse_bgp_lib::hash_toStr(router_hash_id));


    // Setup the router record table object
    memcpy(r_object.ip_addr, client->c_ip, sizeof(client->c_ip));
    update.router[parse_bgp_lib::LIB_ROUTER_IP].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_IP];
    update.router[parse_bgp_lib::LIB_ROUTER_IP].value.push_back(string(client->c_ip));

    try {
        bmp_type = pBMP->handleMessage(read_fd);

        /*
         * Now that we have parsed the BMP message...
         *  add record to the database
         */

        if (bmp_type != parseBMP::TYPE_INIT_MSG) {
            std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(
                    template_cfg::BMP_ROUTER);
            if (it != template_map->template_map.end()) {
                update.router[parse_bgp_lib::LIB_ROUTER_TIMESTAMP].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_TIMESTAMP];
                string ts;
                parse_bgp_lib::getTimestamp(0, 0, ts);
                update.router[parse_bgp_lib::LIB_ROUTER_TIMESTAMP].value.push_back(ts);
                mbus_ptr->update_Router(update.router, mbus_ptr->ROUTER_ACTION_FIRST, it->second);
            }
        }

        // only process the peering info if the message includes it
        if (bmp_type < 4) {
            // Update p_entry hash_id now that add_Router updated it.
            memcpy(p_entry.router_hash_id, r_object.hash_id, sizeof(r_object.hash_id));
            peer_info_key =  p_entry.peer_addr;
            peer_info_key += p_entry.peer_rd;
            BMPReader::peer_info *peer_info = &peer_info_map[peer_info_key];
            /*
             * Create the peer hash_id here
             */
            // Generate the hash
            //Fill p_info fields to be passed to the parser
            peer_info->peer_hash_str= parse_bgp_lib::hash_toStr(p_entry.hash_id);
            peer_info->routerAddr = std::string((char *)r_object.ip_addr);
            peer_info->peerAddr = p_entry.peer_addr;

            parser.setPeerInfo(peer_info);

//            parser.parseBmpPeer(read_fd, parse_peer_hdr, update);
            std::ostringstream numString;

            if (p_entry.isIPv4) {
                update.peer[parse_bgp_lib::LIB_PEER_ISIPV4].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISIPV4];
                update.peer[parse_bgp_lib::LIB_PEER_ISIPV4].value.push_back(std::string("1"));
            } else {
                update.peer[parse_bgp_lib::LIB_PEER_ISIPV4].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISIPV4];
                update.peer[parse_bgp_lib::LIB_PEER_ISIPV4].value.push_back(std::string("0"));
            }

            if (p_entry.isPrePolicy) {
                update.peer[parse_bgp_lib::LIB_PEER_ISPREPOLICY].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISPREPOLICY];
                update.peer[parse_bgp_lib::LIB_PEER_ISPREPOLICY].value.push_back(std::string("1"));
            } else {
                update.peer[parse_bgp_lib::LIB_PEER_ISPREPOLICY].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISPREPOLICY];
                update.peer[parse_bgp_lib::LIB_PEER_ISPREPOLICY].value.push_back(std::string("0"));
            }

            if (p_entry.isAdjIn) {
                update.peer[parse_bgp_lib::LIB_PEER_ISADJIN].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISADJIN];
                update.peer[parse_bgp_lib::LIB_PEER_ISADJIN].value.push_back(std::string("1"));
            } else {
                update.peer[parse_bgp_lib::LIB_PEER_ISADJIN].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISADJIN];
                update.peer[parse_bgp_lib::LIB_PEER_ISADJIN].value.push_back(std::string("0"));
            }

            // Update the DB peer entry struct
            update.peer[parse_bgp_lib::LIB_PEER_ADDR].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ADDR];
            update.peer[parse_bgp_lib::LIB_PEER_ADDR].value.push_back(p_entry.peer_addr);

            numString << p_entry.peer_as;

            update.peer[parse_bgp_lib::LIB_PEER_AS].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_AS];
            update.peer[parse_bgp_lib::LIB_PEER_AS].value.push_back(numString.str());

            update.peer[parse_bgp_lib::LIB_PEER_BGP_ID].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_BGP_ID];
            update.peer[parse_bgp_lib::LIB_PEER_BGP_ID].value.push_back(p_entry.peer_bgp_id);

            update.peer[parse_bgp_lib::LIB_PEER_RD].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_RD];
            update.peer[parse_bgp_lib::LIB_PEER_RD].value.push_back(p_entry.peer_rd);

            numString.str(std::string());
            numString << p_entry.timestamp_secs;

            update.peer[parse_bgp_lib::LIB_PEER_TIMESTAMP_SECS].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_TIMESTAMP_SECS];
            update.peer[parse_bgp_lib::LIB_PEER_TIMESTAMP_SECS].value.push_back(numString.str());

            numString.str(std::string());
            numString << p_entry.timestamp_us;

            update.peer[parse_bgp_lib::LIB_PEER_TIMESTAMP_USECS].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_TIMESTAMP_USECS];
            update.peer[parse_bgp_lib::LIB_PEER_TIMESTAMP_USECS].value.push_back(numString.str());

            update.peer[parse_bgp_lib::LIB_PEER_TIMESTAMP].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_TIMESTAMP];
            string ts;
            parse_bgp_lib::getTimestamp(p_entry.timestamp_secs, p_entry.timestamp_us, ts);
            update.peer[parse_bgp_lib::LIB_PEER_TIMESTAMP].value.push_back(ts);

            if (p_entry.isL3VPN) {
                update.peer[parse_bgp_lib::LIB_PEER_ISL3VPN].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISL3VPN];
                update.peer[parse_bgp_lib::LIB_PEER_ISL3VPN].value.push_back(std::string("1"));
            } else {
                update.peer[parse_bgp_lib::LIB_PEER_ISADJIN].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_ISL3VPN];
                update.peer[parse_bgp_lib::LIB_PEER_ISADJIN].value.push_back(std::string("0"));
            }

            MD5 hash;

            parse_bgp_lib::update_hash(&update.peer[parse_bgp_lib::LIB_PEER_ADDR].value, &hash);
            parse_bgp_lib::update_hash(&update.peer[parse_bgp_lib::LIB_PEER_RD].value, &hash);
            parse_bgp_lib::update_hash(&update.router[parse_bgp_lib::LIB_ROUTER_HASH_ID].value, &hash);

            /* TODO: Uncomment once this is fixed in XR
             * Disable hashing the bgp peer ID since XR has an issue where it sends 0.0.0.0 on subsequent PEER_UP's
             *    This will be fixed in XR, but for now we can disable hashing on it.
             *
            hash.update((unsigned char *) p_object.peer_bgp_id,
                    strlen(p_object.peer_bgp_id));
            */

            hash.finalize();

            // Save the hash
            unsigned char *hash_raw = hash.raw_digest();
            update.peer[parse_bgp_lib::LIB_PEER_HASH_ID].name = parse_bgp_lib::parse_bgp_lib_peer_names[parse_bgp_lib::LIB_PEER_HASH_ID];
            update.peer[parse_bgp_lib::LIB_PEER_HASH_ID].value.push_back(parse_bgp_lib::hash_toStr(hash_raw));
            delete[] hash_raw;

            std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(template_cfg::BMP_PEER);
            if (it != template_map->template_map.end() and (bmp_type != parseBMP::TYPE_PEER_UP)) {
                mbus_ptr->update_Peer(update.router, update.peer, mbus_ptr->PEER_ACTION_FIRST, it->second);
            }
        }

        /*
         * At this point we only have the BMP header message, what happens next depends
         *      on the BMP message type.
         */
        switch (bmp_type) {
            case parseBMP::TYPE_PEER_DOWN : { // Peer down type

                MsgBusInterface::obj_peer_down_event down_event = {};

                if (pBMP->parsePeerDownEventHdr(read_fd,down_event)) {
                    pBMP->bufferBMPMessage(read_fd);


                    // Prepare the BGP parser
                    pBGP = new parseBGP(logger, mbus_ptr, &p_entry, (char *)r_object.ip_addr,
                                        &peer_info_map[peer_info_key], &parser);

                    if (cfg->debug_bgp)
                       pBGP->enableDebug();

                    // Check if the reason indicates we have a BGP message that follows
                    switch (down_event.bmp_reason) {
                        case 1 : { // Local system close with BGP notify
                            snprintf(down_event.error_text, sizeof(down_event.error_text),
                                    "Local close by (%s) for peer (%s) : ", r_object.ip_addr,
                                    p_entry.peer_addr);
                            pBGP->handleDownEvent(pBMP->bmp_data, pBMP->bmp_data_len, down_event, update);
                            break;
                        }
                        case 2 : // Local system close, no bgp notify
                        {
                            // Read two byte code corresponding to the FSM event
                            uint16_t fsm_event = 0 ;
                            memcpy(&fsm_event, pBMP->bmp_data, 2);
                            bgp::SWAP_BYTES(&fsm_event);

                            snprintf(down_event.error_text, sizeof(down_event.error_text),
                                    "Local (%s) closed peer (%s) session: fsm_event=%d, No BGP notify message.",
                                    r_object.ip_addr,p_entry.peer_addr, fsm_event);
                            break;
                        }
                        case 3 : { // remote system close with bgp notify
                            snprintf(down_event.error_text, sizeof(down_event.error_text),
                                    "Remote peer (%s) closed local (%s) session: ", r_object.ip_addr,
                                    p_entry.peer_addr);

                            pBGP->handleDownEvent(pBMP->bmp_data, pBMP->bmp_data_len, down_event, update);
                            break;
                        }
                    }

                    delete pBGP;            // Free the bgp parser after each use.

                    // Add event to the database
                    std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(template_cfg::BMP_PEER);
                    if (it != template_map->template_map.end()) {
                        mbus_ptr->update_Peer(update.router, update.peer, mbus_ptr->PEER_ACTION_DOWN, it->second);
                    }

                } else {
                    LOG_ERR("Error with client socket %d", read_fd);
                    // Make sure to free the resource
                    throw "BMPReader: Unable to read from client socket";
                }
                break;
            }

            case parseBMP::TYPE_PEER_UP : // Peer up type
            {
                MsgBusInterface::obj_peer_up_event up_event = {};

                if (pBMP->parsePeerUpEventHdr(read_fd, up_event)) {
                    LOG_INFO("%s: PEER UP Received, local addr=%s:%hu remote addr=%s:%hu", client->c_ip,
                            up_event.local_ip, up_event.local_port, p_entry.peer_addr, up_event.remote_port);

                    pBMP->bufferBMPMessage(read_fd);

                    // Prepare the BGP parser
                    pBGP = new parseBGP(logger, mbus_ptr, &p_entry, (char *)r_object.ip_addr,
                                        &peer_info_map[peer_info_key], &parser);

                    if (cfg->debug_bgp)
                       pBGP->enableDebug();

                    // Parse the BGP sent/received open messages
                    pBGP->handleUpEvent(pBMP->bmp_data, pBMP->bmp_data_len, &up_event, update);

                    // Free the bgp parser
                    delete pBGP;

                    // Add the up event to the DB
                    std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(template_cfg::BMP_PEER);
                    if (it != template_map->template_map.end()) {
                        mbus_ptr->update_Peer(update.router, update.peer, mbus_ptr->PEER_ACTION_UP, it->second);
                    }
                } else {
                    LOG_NOTICE("%s: PEER UP Received but failed to parse the BMP header.", client->c_ip);
                }
                break;
            }

            case parseBMP::TYPE_ROUTE_MON : { // Route monitoring type
                pBMP->bufferBMPMessage(read_fd);

                /*
                 * Read and parse the the BGP message from the client.
                 *     parseBGP will update mysql directly
                 */
                pBGP = new parseBGP(logger, mbus_ptr, &p_entry, (char *)r_object.ip_addr,
                                    &peer_info_map[peer_info_key], &parser);

                if (cfg->debug_bgp)
                    pBGP->enableDebug();

                pBGP->handleUpdate(pBMP->bmp_data, pBMP->bmp_data_len, template_map, update);
                string str(reinterpret_cast<char*>(client->hash_id), 16);  //storing the client hash in a string
                if(client->initRec && cfg->router_baseline_time.find(str) == cfg->router_baseline_time.end())
                        //check if client has received init message and Baseline time is not already calculated
                {
                    peer_info_map_iter it = peer_info_map.begin();
                    while (it != peer_info_map.end() && it->second.endOfRIB)
                        ++it;

                    if (it == peer_info_map.end() || checkRIBdumpRate(p_entry.timestamp_secs, template_map->ribSeq)) {  //End-Of-RIBs are received for all peers.
                        timeval now;
                        gettimeofday(&now, NULL);
                        cfg->router_baseline_time[str] = 1.2 * (now.tv_sec - client->startTime.tv_sec);  //20% buffer for baseline time
                    }
                }
                delete pBGP;

                break;
            }

            case parseBMP::TYPE_STATS_REPORT : { // Stats Report
                MsgBusInterface::obj_stats_report stats = {};
                if (!pBMP->handleStatsReport(read_fd, stats)) {
                    /*
                     * Only create the stats map if templating requires it
                     */
                    std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(template_cfg::BMP_STATS);
                    if (it != template_map->template_map.end()) {
                        parse_bgp_lib::parseBgpLib::stat_map parse_stats;
                        std::ostringstream numString;

                        numString << stats.prefixes_rej;
                        parse_stats[parse_bgp_lib::LIB_STATS_PREFIXES_REJ].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_PREFIXES_REJ];
                        parse_stats[parse_bgp_lib::LIB_STATS_PREFIXES_REJ].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.invalid_as_confed_loop;
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_AS_CONFED_LOOP].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_INVALID_AS_CONFED_LOOP];
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_AS_CONFED_LOOP].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.invalid_as_path_loop;
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_AS_PATH_LOOP].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_INVALID_AS_PATH_LOOP];
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_AS_PATH_LOOP].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.invalid_cluster_list;
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_CLUSTER_LIST].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_INVALID_CLUSTER_LIST];
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_CLUSTER_LIST].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.invalid_originator_id;
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_ORIGINATOR_ID].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_INVALID_ORIGINATOR_ID];
                        parse_stats[parse_bgp_lib::LIB_STATS_INVALID_ORIGINATOR_ID].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.known_dup_prefixes;
                        parse_stats[parse_bgp_lib::LIB_STATS_KNOWN_DUP_PREFIXES].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_KNOWN_DUP_PREFIXES];
                        parse_stats[parse_bgp_lib::LIB_STATS_KNOWN_DUP_PREFIXES].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.known_dup_withdraws;
                        parse_stats[parse_bgp_lib::LIB_STATS_KNOWN_DUP_WITHDRAWS].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_KNOWN_DUP_WITHDRAWS];
                        parse_stats[parse_bgp_lib::LIB_STATS_KNOWN_DUP_WITHDRAWS].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.routes_adj_rib_in;
                        parse_stats[parse_bgp_lib::LIB_STATS_ROUTES_ADJ_RIB_IN].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_ROUTES_ADJ_RIB_IN];
                        parse_stats[parse_bgp_lib::LIB_STATS_ROUTES_ADJ_RIB_IN].value.push_back(numString.str());

                        numString.str(std::string());
                        numString << stats.routes_loc_rib;
                        parse_stats[parse_bgp_lib::LIB_STATS_ROUTES_LOC_RIB].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_STATS_ROUTES_LOC_RIB];
                        parse_stats[parse_bgp_lib::LIB_STATS_ROUTES_LOC_RIB].value.push_back(numString.str());

                        mbus_ptr->add_StatReport(update.peer, update.router, parse_stats, it->second);
                    }
                }

                break;
            }

            case parseBMP::TYPE_INIT_MSG : { // Initiation Message
                client->initRec = true; 		//indicating that init message is received for the router/client.
                LOG_INFO("%s: Init message received with length of %u", client->c_ip, pBMP->getBMPLength());
                /**
                 * BMP message buffer (normally only contains the BGP message) used by parse_bgp_lib
                 *      BMP data message is read into this buffer so that it can be passed to the BGP parser for handling.
                 *      Complete BGP message is read, otherwise error is generated.
                 */
                u_char parse_bgp_lib_bmp_data[BMP_PACKET_BUF_SIZE + 1];
                bzero(parse_bgp_lib_bmp_data, BMP_PACKET_BUF_SIZE + 1);
                size_t parse_bgp_lib_data_len;

                pBMP->handleInitMsg(read_fd, r_object, parse_bgp_lib_bmp_data, parse_bgp_lib_data_len);
                parser.parseBmpInitMsg(read_fd, parse_bgp_lib_bmp_data, parse_bgp_lib_data_len, update);

                if(cfg->pat_enabled && r_object.hash_type)
                    hashRouter(client, r_object, cfg, router_hash_id, logger);
                LOG_INFO("Router ID hashed with hash_type: %d", r_object.hash_type);
                // Update the router entry with the details
                std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(template_cfg::BMP_ROUTER);
                if (it != template_map->template_map.end())
                    mbus_ptr->update_Router(update.router, mbus_ptr->ROUTER_ACTION_INIT, it->second);

                break;
            }

            case parseBMP::TYPE_TERM_MSG : { // Termination Message
                LOG_INFO("%s: Term message received with length of %u", client->c_ip, pBMP->getBMPLength());

                u_char parse_bgp_lib_bmp_data[BMP_PACKET_BUF_SIZE + 1];
                bzero(parse_bgp_lib_bmp_data, BMP_PACKET_BUF_SIZE + 1);
                size_t parse_bgp_lib_data_len;

                pBMP->handleTermMsg(read_fd, r_object, parse_bgp_lib_bmp_data, parse_bgp_lib_data_len);
                parser.parseBmpTermMsg(read_fd, parse_bgp_lib_bmp_data, parse_bgp_lib_data_len, update);

                LOG_INFO("Proceeding to disconnect router");
                std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(template_cfg::BMP_ROUTER);
                if (it != template_map->template_map.end())
                    mbus_ptr->update_Router(update.router, mbus_ptr->ROUTER_ACTION_TERM, it->second);

                close(client->c_sock);

                rval = false;                           // Indicate connection is closed
                break;
            }

        }
    } catch (char const *str) {
        // Mark the router as disconnected and update the error to be a local disconnect (no term message received)
        LOG_INFO("%s: Caught: %s", client->c_ip, str);

        std::map<template_cfg::TEMPLATE_TOPICS, template_cfg::Template_cfg>::iterator it = template_map->template_map.find(
                template_cfg::BMP_ROUTER);
        if (it != template_map->template_map.end()) {

            parse_bgp_lib::parseBgpLib::router_map router;
            router[parse_bgp_lib::LIB_ROUTER_HASH_ID].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_HASH_ID];
            router[parse_bgp_lib::LIB_ROUTER_HASH_ID].value.push_back(parse_bgp_lib::hash_toStr(router_hash_id));

            router[parse_bgp_lib::LIB_ROUTER_IP].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_IP];
            router[parse_bgp_lib::LIB_ROUTER_IP].value.push_back(string(client->c_ip));

            router[parse_bgp_lib::LIB_ROUTER_TIMESTAMP].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_TIMESTAMP];
            string ts;
            parse_bgp_lib::getTimestamp(0, 0, ts);
            router[parse_bgp_lib::LIB_ROUTER_TIMESTAMP].value.push_back(ts);

            std::ostringstream numString;
            numString << parseBMP::TERM_REASON_OPENBMP_CONN_ERR;
            router[parse_bgp_lib::LIB_ROUTER_TERM_REASON_CODE].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_TERM_REASON_CODE];
            router[parse_bgp_lib::LIB_ROUTER_TERM_REASON_CODE].value.push_back(numString.str());

            if (str != NULL) {
                router[parse_bgp_lib::LIB_ROUTER_TERM_REASON_TEXT].name = parse_bgp_lib::parse_bgp_lib_router_names[parse_bgp_lib::LIB_ROUTER_TERM_REASON_TEXT];
                router[parse_bgp_lib::LIB_ROUTER_TERM_REASON_TEXT].value.push_back(str);
            }
            mbus_ptr->update_Router(router, mbus_ptr->ROUTER_ACTION_TERM, it->second);
        }


        close(client->c_sock);

        delete pBMP;                    // Make sure to free the resource
        throw str;
    }
    
    // Send BMP RAW packet data
    mbus_ptr->send_bmp_raw(router_hash_id, p_entry, pBMP->bmp_packet, pBMP->bmp_packet_len);

    // Free the bmp parser
    delete pBMP;

    return rval;
}

bool BMPReader::checkRIBdumpRate(uint32_t timeStamp, int ribSeq) {
    int time, currRate;                                  

    if(!hasPrevRIBdumpTime) {
	prevRIBdumpTime = timeStamp;
	hasPrevRIBdumpTime = true;
    }

    else {
	time = timeStamp - prevRIBdumpTime;
	if(time > 0) { 
            currRate = ribSeq / time;
	    maxRIBdumpRate = max(currRate, maxRIBdumpRate);
	    if(currRate < maxRIBdumpRate * 0.15) {
		if (!isBelowThresholdDumpRate)
		    belowThresholdInitTime = timeStamp;
		isBelowThresholdDumpRate = true;
		if (timeStamp - belowThresholdInitTime >= 3)
	    	    return true;
	    }
	    else
		isBelowThresholdDumpRate = false;
	}
	prevRIBdumpTime = timeStamp;
    }
    return false;
}

/**
 * Generate BMP router HASH
 *
 * \param [in,out] client   Pointer to client info and hash_val used to generate the hash.
 *
 * \return client.hash_id will be updated with the generated hash
 */

void hashRouter(BMPListener::ClientInfo *client,MsgBusInterface::obj_router &r_object,
                Config *cfg, u_char *router_hash_id, Logger *logger) {
    char *hash_val;
    if(r_object.hash_type==2)
          hash_val=r_object.bgp_id;
    else if(r_object.hash_type==1)
          hash_val=(char *)r_object.name;

    string c_hash_str;
    MsgBusInterface::hash_toStr(cfg->c_hash_id, c_hash_str);

    MD5 hash;
    hash.update((unsigned char *)hash_val, strlen(hash_val));
    hash.update((unsigned char *)c_hash_str.c_str(), c_hash_str.length());
    hash.finalize();

    // Save the hash
    unsigned char *hash_bin = hash.raw_digest();
    memcpy(client->hash_id, hash_bin, 16);
    delete[] hash_bin;
    memcpy(router_hash_id, client->hash_id, sizeof(router_hash_id));
    memcpy(r_object.hash_id, router_hash_id, sizeof(r_object.hash_id));
    LOG_INFO("Router ID hashed with hash_type: %d", r_object.hash_type);
}

/*
 * Enable/Disable debug
 */
void BMPReader::enableDebug() {
    debug = true;
}

void BMPReader::disableDebug() {
    debug = false;
}
